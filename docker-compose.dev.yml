version: "3.8"
services:
  traefik:
    image: traefik
    container_name: osi-traefik
    command:
      - --api=true
      - --api.insecure=true # Dashboard
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false # exposes services by default if true
      - --entryPoints.web.address=:80
    ports:
      - "80:80" # HTTP port
      - "8080:8080" # Traefik
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro" # docker api socket

  postgres:
    image: supabase/postgres:latest
    container_name: osi-postgres
    env_file: .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"] # runs a shell command to check if the postgres server is ready - https://www.postgresql.org/docs/current/app-pg-isready.html
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    labels:
      - traefik.enable=true
      - traefik.http.routers.postgres.rule=Host(`postgres.localhost`)
    tmpfs:
      - "/var/lib/postgresql/data"
    volumes:
      - "./create-publication.sql:/docker-entrypoint-initdb.d/create-publication.sql"

  realtime:
    image: supabase/realtime:latest
    container_name: osi-postgres-realtime
    environment:
      DB_HOST: postgres
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_PORT: ${POSTGRES_PORT}
      PORT: 5000
      SECURE_CHANNELS: "false"
    ports:
      - "23400:5000"
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - traefik.enable=true

  api:
    container_name: osi-api
    build:
      context: ./OSItemIndex.API
      dockerfile: Dockerfile.dev
    env_file: .env
    environment:
      ASPNETCORE_ENVIRONMENT: development
      DbOptions__DbHost: postgres
      DbOptions__DbUser: ${POSTGRES_USER}
      DbOptions__DbPass: ${POSTGRES_PASSWORD}
      DbOptions__DbPort: ${POSTGRES_PORT}
      DbOptions__DbDatabase: ${POSTGRES_DB}
    ports:
      - "23401:5000"
    volumes:
      - "./OSItemIndex.API/src/:/app"
    deploy:
      resources:
        limits:
          memory: 512M
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.priority=90
      - traefik.http.routers.api.rule=PathPrefix(`/api`) || PathPrefix(`/swagger`)

  updater:
    container_name: osi-updater
    build:
      context: ./OSItemIndex.Updater
      dockerfile: Dockerfile.dev
    env_file: .env
    environment:
      ASPNETCORE_ENVIRONMENT: development
      DbOptions__DbHost: postgres
      DbOptions__DbUser: ${POSTGRES_USER}
      DbOptions__DbPass: ${POSTGRES_PASSWORD}
      DbOptions__DbPort: ${POSTGRES_PORT}
      DbOptions__DbDatabase: ${POSTGRES_DB}
    ports:
      - "23402:5000"
    volumes:
      - "./OSItemIndex.Updater/src/:/app"
    deploy:
      resources:
        limits:
          memory: 512M
    depends_on:
      api:
        condition: service_started
      realtime:
        condition: service_started
      postgres:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.updater.priority=100
      - traefik.http.routers.updater.rule=PathPrefix(`/api/services`)

  ui:
    container_name: osi-ui
    build:
      context: ./OSItemIndex.UI
      dockerfile: Dockerfile.dev
    environment:
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - "23403:3000"
    depends_on:
      api:
        condition: service_started
    volumes:
      - "./OSItemIndex.UI/src/:/app"
    labels:
      - traefik.enable=true
      - traefik.http.routers.ui.priority=80
      - traefik.http.routers.ui.rule=Host(`localhost`)
